using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using N = nilnul._num.bigint.be.Natural.Asserted;


namespace nilnul.num.set.op_
{
	static public class _GcdX
	{
		/// <summary>
		/// 0 is decomposed as Omega, the universe Bag(multiSet) of all primes.
		/// other, aka positive nums, are factored as Bag of primes
		///		for example, 1 is decomposed as {}.
		///	for a set of nums, return the largest Bag, and for each bag in the collection of bags, the returned bag is subBag
		///	
		/// So this is in fact the intersection of bags.
		///		and the identity element for the intersection operator is the universal set Omega.
		///	
		/// And omega in specific situations can be interpretaed as the smallest super set. 
		///		for example, for {0, 4, 6}, the universe set generated by 0 can be interpreted as 12.
		/// </summary>
		/// <param name="args"></param>
		/// <returns></returns>
		static public N Gcd(IEnumerable< N> args) {

			if (nilnul.str.be.NoneX.None(args))
			{
				return nilnul.num.no.op_.Gcd.Singleton.eval();	// the biggest bag; and for each bag in the collection of bags, the biggest bag is the subBag
			}
			return nilnul.num.duo.op_._GcdX.Gcd(	//the biggest bag; and for each bag in the two bags, the bag is subbag.
				nilnul.num.op_.Gcd.Singleton.eval(args.First())	//the biggest bag; and for each bag in the collection of bags, the returned is subBag.
				,
				Gcd(
					args.Skip(1)	
				)
			);

		}
	}
}
